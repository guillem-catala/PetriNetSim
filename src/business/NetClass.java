/* Copyright Guillem Catala. www.guillemcatala.com/petrinetsim. Licensed http://creativecommons.org/licenses/by-nc-sa/3.0/ */
package business;

import java.io.IOException;
import java.io.StringReader;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.codehaus.janino.CompileException;
import org.codehaus.janino.Parser.ParseException;
import org.codehaus.janino.Scanner.ScanException;
import org.codehaus.janino.SimpleCompiler;

/**
 *
 * @author Guillem
 */
public class NetClass {

    /** Contains the code that represents the PetriNet.*/
    private StringBuffer netSource;
    /** Represents a line separator. */
    static final String EOL = System.getProperty("line.separator");

    public NetClass() {
        this.generateNetSource();
    }

    /** Compiles a string and creates a new PetriNet instance. */
    public void compile(String javaSource) throws CompileException, ParseException, ScanException, ClassNotFoundException, InstantiationException, IllegalAccessException {
        SimpleCompiler compiler = new SimpleCompiler();
        try {
            compiler.cook(new StringReader(javaSource));
            Class<?> cl = compiler.getClassLoader().loadClass(Global.petriNet.getLabel());
            Global.petriNet = (PetriNet) cl.newInstance();
        } catch (IOException ex) {
            Logger.getLogger(NetClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** Generates a class that represents a PetriNet model */
    public String generateNetSource() {
        this.netSource = new StringBuffer();
        this.netSource.append("/* This is an autogenerated PetriNet Java file. */").append(EOL);
        // Imports
        this.netSource.append("import business.*;").append(EOL);
        if (!Global.petriNet.getImportText().isEmpty()) {
            this.netSource.append(Global.petriNet.getImportText()).append(EOL);
        }

        if (!Global.petriNet.getImplementText().isEmpty()) {
            this.netSource.append("public class ").append(Global.petriNet.getLabel()).append(" extends PetriNet implements ").append(Global.petriNet.getImplementText()).append(" {").append(EOL).append(EOL);
        } else {
            this.netSource.append("public class ").append(Global.petriNet.getLabel()).append(" extends PetriNet {").append(EOL);
        }

        // Declarations
        this.netSource.append(EOL).append("  /** Custom declarations. */").append(EOL);
        if (!Global.petriNet.getDeclarationText().isEmpty()) {
            this.netSource.append("  ").append(Global.petriNet.getDeclarationText()).append(EOL);
        }

        // Places
        ArrayList places = Global.petriNet.getPlaces();
        if (!places.isEmpty()) {
            this.netSource.append(EOL).append("  /** Places declaration. */").append(EOL);
            for (int i = 0; i < places.size(); i++) {
                Place place = (Place) places.get(i);
                this.netSource.append("  private Place ").append(place.getId()).append(" = new Place(\"" + place.getId() + "\");").append(EOL);
            }
        }

        // Transition
        ArrayList transitions = Global.petriNet.getTransitions();
        if (!transitions.isEmpty()) {
            this.netSource.append(EOL).append("  /** Transitions declaration. */").append(EOL);
            for (int i = 0; i < transitions.size(); i++) {
                Transition transition = (Transition) transitions.get(i);
                this.netSource.append("  private Transition ").append(transition.getId()).append(" = new Transition(\"" + transition.getId() + "\",\"" + addSlashes(transition.getGuardText()) + "\") {").append(EOL);
                this.netSource.append("         public boolean evaluate(){").append(EOL);
                this.netSource.append("                 " + transition.getGuardText()).append(EOL);
                this.netSource.append("         }").append(EOL);
                this.netSource.append("  };").append(EOL);
            }
        }

        // Input Arcs
        ArrayList inputArcs = Global.petriNet.getInputArcs();
        if (!inputArcs.isEmpty()) {
            this.netSource.append(EOL).append("  /** Input Arcs declaration. */").append(EOL);
            for (int i = 0; i < inputArcs.size(); i++) {
                InputArc inputArc = (InputArc) inputArcs.get(i);
                this.netSource.append("  private InputArc ").append(inputArc.getId()).append(" = new InputArc(\"" + inputArc.getId() + "\",").append(inputArc.getPlace().getId()).append(",").append(inputArc.getTransition().getId()).append(",").append(" \"" + addSlashes(inputArc.getExecuteText()) + "\" ").append(") {").append(EOL);
                this.netSource.append("         public boolean evaluate() {").append(EOL);
                this.netSource.append("                 return " + addSlashes(inputArc.getEvaluateText()) + ";").append(EOL);
                this.netSource.append("         }").append(EOL);
                this.netSource.append("         public TokenSet execute() {").append(EOL);
                this.netSource.append("                 return new TokenSet(" + inputArc.getExecuteText() + ");").append(EOL);
                this.netSource.append("         }").append(EOL);
                this.netSource.append("  };").append(EOL);
            }
        }

        // Output Arcs
        ArrayList OutputArcs = Global.petriNet.getOutputArcs();
        if (!OutputArcs.isEmpty()) {
            this.netSource.append(EOL).append("  /** Output Arcs declaration. */").append(EOL);
            for (int i = 0; i < OutputArcs.size(); i++) {

                OutputArc outputArc = (OutputArc) OutputArcs.get(i);

                this.netSource.append("  private OutputArc ").append(outputArc.getId()).append(" = new OutputArc(\"" + outputArc.getId() + "\",").append(outputArc.getPlace().getId()).append(",").append(outputArc.getTransition().getId()).append(",").append(" \"" + addSlashes(outputArc.getExecuteText()) + "\" ").append("){").append(EOL);
                this.netSource.append("         public TokenSet execute() {").append(EOL);

                StringTokenizer expression = new StringTokenizer(outputArc.getExecuteText(), "@");
                String executeText = "";
                String time = "";
                if (expression.countTokens() == 2) {
                    executeText = expression.nextToken();
                    time = expression.nextToken();
                    this.netSource.append("                 return new TokenSet(" + executeText + "," + time + ");").append(EOL);

                } else {
                    this.netSource.append("                 return new TokenSet(" + outputArc.getExecuteText() + ");").append(EOL);
                }
                this.netSource.append("         }").append(EOL);
                this.netSource.append("  };").append(EOL);
            }

        }

        // code inside the class constructor (initialization)
        this.netSource.append(EOL).append("  /** Class " + Global.petriNet.getLabel() + " constructor. */").append(EOL);
        this.netSource.append("  public ").append(Global.petriNet.getLabel()).append("() {").append(EOL);
        this.netSource.append("     setId(\"").append(Global.petriNet.getId()).append("\");").append(EOL);
        this.netSource.append("     setLabel(\"").append(Global.petriNet.getLabel()).append("\");").append(EOL);
        if (!Global.petriNet.getDeclarationText().isEmpty()) {
            this.netSource.append("     setDeclarationText(\"").append(addSlashes(Global.petriNet.getDeclarationText())).append("\");").append(EOL);
        }
        if (!Global.petriNet.getImplementText().isEmpty()) {
            this.netSource.append("     setImplementText(\"").append(addSlashes(Global.petriNet.getImplementText())).append("\");").append(EOL);
        }
        if (!Global.petriNet.getImportText().isEmpty()) {
            this.netSource.append("     setImportText(\"").append(addSlashes(Global.petriNet.getImportText())).append("\");").append(EOL);
        }

        for (int i = 0; i < places.size(); i++) {
            Place place = (Place) places.get(i);
            for (int j = 0; j < place.getTokens().size(); j++) {
                Token token = (Token) place.getTokens().get(j);
                this.netSource.append("     " + place.getId() + ".addToken(new TokenSet(" + token.getInitialMarkingtExpression() + ", \"" + addSlashes(token.getInitialMarkingtExpression()) + "\"));").append(EOL);
            }
            if (place.getCapacity() > 0) {
                this.netSource.append("     " + place.getId() + ".setCapacity(" + place.getCapacity() + ");").append(EOL);
            }
            this.netSource.append("     " + place.getId() + ".setLabel(\"" + place.getLabel() + "\");").append(EOL);
            this.netSource.append("     addPlace(" + place.getId() + ");").append(EOL);

        }

        for (int i = 0; i < transitions.size(); i++) {
            Transition transition = (Transition) transitions.get(i);
            this.netSource.append("     " + transition.getId() + ".setLabel(\"" + transition.getLabel() + "\");").append(EOL);
            this.netSource.append("     addTransition(" + transition.getId() + ");").append(EOL);
        }

        for (int i = 0; i < inputArcs.size(); i++) {
            InputArc inputArc = (InputArc) inputArcs.get(i);
            this.netSource.append("     " + inputArc.getId() + ".setEvaluateText(\"" + addSlashes(inputArc.getEvaluateText()) + "\");").append(EOL);
            this.netSource.append("     " + inputArc.getId() + ".setExecuteText(\"" + addSlashes(inputArc.getExecuteText()) + "\");").append(EOL);
            this.netSource.append("     addInputArc(" + inputArc.getId() + ");").append(EOL);
        }

        for (int i = 0; i < OutputArcs.size(); i++) {
            OutputArc outputArc = (OutputArc) OutputArcs.get(i);
            this.netSource.append("     addOutputArc(" + outputArc.getId() + ");").append(EOL);
        }

        //end class
        this.netSource.append("  }").append(EOL);
        this.netSource.append(EOL).append("}").append(EOL);

        return this.netSource.toString();
    }

    /** Returns a string with backslashes before characters that need to be quoted */
    public static String addSlashes(String s) {
        if (s.trim().equals("")) {
            return s;
        }
        String res = s.replace("\"", "\\\"");
        res = res.replace("\n", "\\n");
        return res;
    }

    /**
     * @return the netSource
     */
    public StringBuffer getNetSource() {
        this.generateNetSource();
        return netSource;
    }

    /**
     * @param netSource the netSource to set
     */
    public void setNetSource(StringBuffer netSource) {
        this.netSource = netSource;
    }
}
